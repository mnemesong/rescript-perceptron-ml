// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var MlPerceptronLayer = require("./MlPerceptronLayer.bs.js");

function MakePerceptron3(L1, L2, L3, AF, EM) {
  var L1XL2 = MlPerceptronLayer.MakePerceptronLayersCross(L1, L2, AF, EM);
  var L2XL3 = MlPerceptronLayer.MakePerceptronLayersCross(L2, L3, AF, EM);
  var solve = function (inp, weights) {
    var l1Solvs = Curry._1(L1XL2.input, inp);
    var l2Solvs = Curry._2(L1XL2.solve, l1Solvs, weights._0);
    var l3Solvs = Curry._2(L2XL3.solve, l2Solvs, weights._1);
    return Belt_Option.getExn(Curry._1(L3.arrToLayer, Belt_Array.map(Curry._1(L3.layerToArr, l3Solvs), (function (fv) {
                          return fv.solve;
                        }))));
  };
  var stude = function (inp, out, weights, studeCoeff) {
    var w2x3 = weights._1;
    var w1x2 = weights._0;
    var l1Solvs = Curry._1(L1XL2.input, inp);
    var l2Solvs = Curry._2(L1XL2.solve, l1Solvs, w1x2);
    var l3Solvs = Curry._2(L2XL3.solve, l2Solvs, w2x3);
    var err3 = Curry._2(L2XL3.findError, l3Solvs, out);
    var err2 = Curry._3(L2XL3.backpropagadeError, l2Solvs, err3, w2x3);
    var w1x2$p = Curry._4(L1XL2.weightCorrection, l1Solvs, err2, w1x2, studeCoeff);
    var w2x3$p = Curry._4(L2XL3.weightCorrection, l2Solvs, err3, w2x3, studeCoeff);
    return /* W */{
            _0: w1x2$p,
            _1: w2x3$p
          };
  };
  var init = function (initor) {
    var w1x2 = Curry._1(L1XL2.init, (function (i, j) {
            return Curry._3(initor, i, j, 1);
          }));
    var w2x3 = Curry._1(L2XL3.init, (function (i, j) {
            return Curry._3(initor, i, j, 2);
          }));
    return /* W */{
            _0: w1x2,
            _1: w2x3
          };
  };
  return {
          solve: solve,
          stude: stude,
          init: init
        };
}

exports.MakePerceptron3 = MakePerceptron3;
/* No side effect */
