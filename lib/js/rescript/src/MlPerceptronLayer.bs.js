// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");

function MakePerceptronLayersCross(Layer1, Layer2, F, Err) {
  var input = function (inp) {
    var arr1 = Curry._1(Layer1.layerToArr, inp);
    var resArr = Belt_Array.map(arr1, (function (v) {
            return {
                    solve: Curry._1(F.solve, v),
                    derivative: Curry._1(F.derivative, v)
                  };
          }));
    return Belt_Option.getExn(Curry._1(Layer1.arrToLayer, resArr));
  };
  var solve = function (l1, w) {
    var layer1Arr = Curry._1(Layer1.layerToArr, l1);
    var weightsArr = Belt_Array.map(Curry._1(Layer1.layerToArr, w), (function (a) {
            return Curry._1(Layer2.layerToArr, a);
          }));
    var layer2SumsArr = Belt_Array.mapWithIndex(Belt_Option.getExn(Belt_Array.get(weightsArr, 0)), (function (n, param) {
            var valsWeighted = Belt_Array.mapWithIndex(layer1Arr, (function (i, v) {
                    return v.solve * Belt_Option.getExn(Belt_Array.get(Belt_Option.getExn(Belt_Array.get(weightsArr, i)), n));
                  }));
            return Belt_Array.reduce(valsWeighted, 0.0, (function (acc, el) {
                          return acc + el;
                        }));
          }));
    var layer2Arr = Belt_Array.map(layer2SumsArr, (function (v) {
            return {
                    solve: Curry._1(F.solve, v),
                    derivative: Curry._1(F.derivative, v)
                  };
          }));
    return Belt_Option.getExn(Curry._1(Layer2.arrToLayer, layer2Arr));
  };
  var findError = function (vals, nominals) {
    var valsArr = Curry._1(Layer2.layerToArr, vals);
    return Belt_Option.getExn(Curry._1(Layer2.arrToLayer, Belt_Array.mapWithIndex(Curry._1(Layer2.layerToArr, nominals), (function (i, n) {
                          return Curry._2(Err.errMetricDerivative, n, Belt_Option.getExn(Belt_Array.get(valsArr, i)).solve);
                        }))));
  };
  var backpropagadeError = function (l1Vals, l2Errs, weights) {
    var weightsArr = Belt_Array.map(Curry._1(Layer1.layerToArr, weights), (function (w) {
            return Curry._1(Layer2.layerToArr, w);
          }));
    return Belt_Option.getExn(Curry._1(Layer1.arrToLayer, Belt_Array.mapWithIndex(Curry._1(Layer1.layerToArr, l1Vals), (function (i, l1v) {
                          var errSum = Belt_Array.reduce(Belt_Array.mapWithIndex(Curry._1(Layer2.layerToArr, l2Errs), (function (j, el) {
                                      return [
                                              Curry._1(Err.errToFloat, el),
                                              j
                                            ];
                                    })), 0.0, (function (acc, el) {
                                  return acc + el[0] * Belt_Option.getExn(Belt_Array.get(Belt_Option.getExn(Belt_Array.get(weightsArr, i)), el[1]));
                                }));
                          return Curry._1(Err.floatToErr, errSum * l1v.derivative);
                        }))));
  };
  var weightCorrection = function (l1Vals, l2Errs, weights, learnCoeff) {
    var l1ValsArr = Curry._1(Layer1.layerToArr, l1Vals);
    var l2ErrArr = Curry._1(Layer2.layerToArr, l2Errs);
    var weightsArr = Belt_Array.map(Curry._1(Layer1.layerToArr, weights), (function (w) {
            return Curry._1(Layer2.layerToArr, w);
          }));
    var newWeightsArr = Belt_Array.mapWithIndex(weightsArr, (function (i, wi) {
            return Belt_Array.mapWithIndex(wi, (function (j, wj) {
                          var solve = Belt_Option.getExn(Belt_Array.get(l1ValsArr, i)).solve;
                          var err = Curry._1(Err.errToFloat, Belt_Option.getExn(Belt_Array.get(l2ErrArr, j)));
                          return wj - learnCoeff * solve * err;
                        }));
          }));
    return Belt_Option.getExn(Curry._1(Layer1.arrToLayer, Belt_Array.map(newWeightsArr, (function (nw) {
                          return Belt_Option.getExn(Curry._1(Layer2.arrToLayer, nw));
                        }))));
  };
  return {
          input: input,
          solve: solve,
          findError: findError,
          backpropagadeError: backpropagadeError,
          weightCorrection: weightCorrection
        };
}

exports.MakePerceptronLayersCross = MakePerceptronLayersCross;
/* No side effect */
