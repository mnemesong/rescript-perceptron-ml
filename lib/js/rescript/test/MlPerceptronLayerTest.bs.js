// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var MlPerceptronLayer = require("../src/MlPerceptronLayer.bs.js");
var Mocha$RescriptMocha = require("rescript-mocha/lib/js/src/Mocha.bs.js");
var Assert$RescriptMocha = require("rescript-mocha/lib/js/src/Assert.bs.js");
var MlActivationFunction = require("../src/MlActivationFunction.bs.js");
var MlErrorMetricFunction = require("../src/MlErrorMetricFunction.bs.js");

function approxEq(x, y) {
  return (x - y) * (x - y) < 0.01;
}

var construct = (function (a, b, c) {
    return [a, b, c];
  });

var deconstruct = (function (vals) {
    return vals;
  });

var layerToArr = (function (a) {
    return a;
  });

var arrToLayer = (function (a) {
    return a;
  });

var Layer1 = {
  layerToArr: layerToArr,
  arrToLayer: arrToLayer,
  construct: construct,
  deconstruct: deconstruct
};

var construct$1 = (function (a1, a2) {
    return [a1, a2];
  });

var deconstruct$1 = (function (vals) {
    return vals;
  });

var layerToArr$1 = (function (a) {
    return a;
  });

var arrToLayer$1 = (function (a) {
    return a;
  });

var Layer2 = {
  layerToArr: layerToArr$1,
  arrToLayer: arrToLayer$1,
  construct: construct$1,
  deconstruct: deconstruct$1
};

var PerceptronLayer = MlPerceptronLayer.MakePerceptronLayersCross(Layer1, Layer2, MlActivationFunction.ActivFuncSigmoid, MlErrorMetricFunction.ErrorMetricEuclidean);

Mocha$RescriptMocha.describe("test perceptron")(undefined, undefined, undefined, (function (param) {
        Mocha$RescriptMocha.describe("test input")(undefined, undefined, undefined, (function (param) {
                var given = construct(0.67, 3.78, -1.56);
                var match = deconstruct(Curry._1(PerceptronLayer.input, given));
                var match$1 = match[2];
                var rd3 = match$1.derivative;
                var rs3 = match$1.solve;
                var match$2 = match[1];
                var rd2 = match$2.derivative;
                var rs2 = match$2.solve;
                var match$3 = match[0];
                var rd1 = match$3.derivative;
                var rs1 = match$3.solve;
                Mocha$RescriptMocha.it("rs1 eq")(undefined, undefined, undefined, (function (param) {
                        Assert$RescriptMocha.ok(approxEq(rs1, 0.66));
                      }));
                Mocha$RescriptMocha.it("rs2 eq")(undefined, undefined, undefined, (function (param) {
                        Assert$RescriptMocha.ok(approxEq(rs2, 0.97));
                      }));
                Mocha$RescriptMocha.it("rs3 eq")(undefined, undefined, undefined, (function (param) {
                        Assert$RescriptMocha.ok(approxEq(rs3, 0.17));
                      }));
                Mocha$RescriptMocha.it("rd1 eq")(undefined, undefined, undefined, (function (param) {
                        Assert$RescriptMocha.ok(approxEq(rd1, 0.22));
                      }));
                Mocha$RescriptMocha.it("rd2 eq")(undefined, undefined, undefined, (function (param) {
                        Assert$RescriptMocha.ok(approxEq(rd2, 0.02));
                      }));
                Mocha$RescriptMocha.it("rd3 eq")(undefined, undefined, undefined, (function (param) {
                        Assert$RescriptMocha.ok(approxEq(rd3, 0.14));
                      }));
              }));
        Mocha$RescriptMocha.describe("test solve")(undefined, undefined, undefined, (function (param) {
                var givenL1Vals = construct({
                      solve: 0.66,
                      derivative: 0.22
                    }, {
                      solve: 0.97,
                      derivative: 0.02
                    }, {
                      solve: 0.17,
                      derivative: 0.14
                    });
                var givenWeights = construct(construct$1(0.76, 0.25), construct$1(0.15, -1.67), construct$1(-5.12, 3.11));
                var match = deconstruct$1(Curry._2(PerceptronLayer.solve, givenL1Vals, givenWeights));
                var match$1 = match[1];
                var rd2 = match$1.derivative;
                var rs2 = match$1.solve;
                var match$2 = match[0];
                var rd1 = match$2.derivative;
                var rs1 = match$2.solve;
                Mocha$RescriptMocha.it("rs1 eq")(undefined, undefined, undefined, (function (param) {
                        Assert$RescriptMocha.ok(approxEq(rs1, 0.44));
                      }));
                Mocha$RescriptMocha.it("rs2 eq")(undefined, undefined, undefined, (function (param) {
                        Assert$RescriptMocha.ok(approxEq(rs2, 0.28));
                      }));
                Mocha$RescriptMocha.it("rd1 eq")(undefined, undefined, undefined, (function (param) {
                        Assert$RescriptMocha.ok(approxEq(rd1, 0.25));
                      }));
                Mocha$RescriptMocha.it("rd2 eq")(undefined, undefined, undefined, (function (param) {
                        Assert$RescriptMocha.ok(approxEq(rd2, 0.20));
                      }));
              }));
        Mocha$RescriptMocha.describe("test findError")(undefined, undefined, undefined, (function (param) {
                var givenL2Vals = construct$1({
                      solve: 0.44,
                      derivative: 0.25
                    }, {
                      solve: 0.28,
                      derivative: 0.20
                    });
                var givenL2Nominals = construct$1(0.46, 0.5);
                var match = deconstruct$1(Curry._2(PerceptronLayer.findError, givenL2Vals, givenL2Nominals));
                var ev2 = match[1];
                var ev1 = match[0];
                Mocha$RescriptMocha.it("ev1 eq")(undefined, undefined, undefined, (function (param) {
                        Assert$RescriptMocha.ok(approxEq(MlErrorMetricFunction.ErrorMetricEuclidean.errToFloat(ev1), -0.02));
                      }));
                Mocha$RescriptMocha.it("ev2 eq")(undefined, undefined, undefined, (function (param) {
                        Assert$RescriptMocha.ok(approxEq(MlErrorMetricFunction.ErrorMetricEuclidean.errToFloat(ev2), -0.22));
                      }));
              }));
      }));

exports.approxEq = approxEq;
exports.Layer1 = Layer1;
exports.Layer2 = Layer2;
exports.PerceptronLayer = PerceptronLayer;
/* PerceptronLayer Not a pure module */
