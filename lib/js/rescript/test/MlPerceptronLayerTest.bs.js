// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var MlPerceptronLayer = require("../src/MlPerceptronLayer.bs.js");
var Mocha$RescriptMocha = require("rescript-mocha/lib/js/src/Mocha.bs.js");
var Assert$RescriptMocha = require("rescript-mocha/lib/js/src/Assert.bs.js");
var MlActivationFunction = require("../src/MlActivationFunction.bs.js");
var MlErrorMetricFunction = require("../src/MlErrorMetricFunction.bs.js");

function approxEq(x, y) {
  return (x - y) * (x - y) < 0.01;
}

var construct = (function (a, b, c) {
    return [a, b, c];
  });

var deconstruct = (function (vals) {
    return vals;
  });

var layerToArr = (function (a) {
    return a;
  });

var arrToLayer = (function (a) {
    return a;
  });

var init = (function (f) {
    return [f(0), f(1), f(2)];
  });

var Layer1 = {
  layerToArr: layerToArr,
  arrToLayer: arrToLayer,
  construct: construct,
  deconstruct: deconstruct,
  init: init
};

var construct$1 = (function (a1, a2) {
    return [a1, a2];
  });

var deconstruct$1 = (function (vals) {
    return vals;
  });

var layerToArr$1 = (function (a) {
    return a;
  });

var arrToLayer$1 = (function (a) {
    return a;
  });

var init$1 = (function (f) {
    return [f(0), f(1)];
  });

var Layer2 = {
  layerToArr: layerToArr$1,
  arrToLayer: arrToLayer$1,
  construct: construct$1,
  deconstruct: deconstruct$1,
  init: init$1
};

var partial_arg = {
  layerToArr: layerToArr$1,
  arrToLayer: arrToLayer$1,
  init: init$1
};

var partial_arg$1 = {
  layerToArr: layerToArr,
  arrToLayer: arrToLayer,
  init: init
};

function partial_arg$2(param, param$1) {
  return MlPerceptronLayer.MakePerceptronLayersCross(partial_arg$1, partial_arg, param, param$1);
}

var PerceptronLayer = partial_arg$2(MlActivationFunction.ActivFuncSigmoid, MlErrorMetricFunction.ErrorMetricEuclidean);

Mocha$RescriptMocha.describe("test perceptron")(undefined, undefined, undefined, (function (param) {
        Mocha$RescriptMocha.describe("test input")(undefined, undefined, undefined, (function (param) {
                var given = construct(0.67, 3.78, -1.56);
                var match = deconstruct(Curry._1(PerceptronLayer.input, given));
                var match$1 = match[2];
                var rd3 = match$1.derivative;
                var rs3 = match$1.solve;
                var match$2 = match[1];
                var rd2 = match$2.derivative;
                var rs2 = match$2.solve;
                var match$3 = match[0];
                var rd1 = match$3.derivative;
                var rs1 = match$3.solve;
                Mocha$RescriptMocha.it("rs1 eq")(undefined, undefined, undefined, (function (param) {
                        Assert$RescriptMocha.ok(approxEq(rs1, 0.66));
                      }));
                Mocha$RescriptMocha.it("rs2 eq")(undefined, undefined, undefined, (function (param) {
                        Assert$RescriptMocha.ok(approxEq(rs2, 0.97));
                      }));
                Mocha$RescriptMocha.it("rs3 eq")(undefined, undefined, undefined, (function (param) {
                        Assert$RescriptMocha.ok(approxEq(rs3, 0.17));
                      }));
                Mocha$RescriptMocha.it("rd1 eq")(undefined, undefined, undefined, (function (param) {
                        Assert$RescriptMocha.ok(approxEq(rd1, 0.22));
                      }));
                Mocha$RescriptMocha.it("rd2 eq")(undefined, undefined, undefined, (function (param) {
                        Assert$RescriptMocha.ok(approxEq(rd2, 0.02));
                      }));
                Mocha$RescriptMocha.it("rd3 eq")(undefined, undefined, undefined, (function (param) {
                        Assert$RescriptMocha.ok(approxEq(rd3, 0.14));
                      }));
              }));
        Mocha$RescriptMocha.describe("test solve")(undefined, undefined, undefined, (function (param) {
                var givenL1Vals = construct({
                      solve: 0.66,
                      derivative: 0.22
                    }, {
                      solve: 0.97,
                      derivative: 0.02
                    }, {
                      solve: 0.17,
                      derivative: 0.14
                    });
                var givenWeights = construct(construct$1(0.76, 0.25), construct$1(0.15, -1.67), construct$1(-5.12, 3.11));
                var match = deconstruct$1(Curry._2(PerceptronLayer.solve, givenL1Vals, givenWeights));
                var match$1 = match[1];
                var rd2 = match$1.derivative;
                var rs2 = match$1.solve;
                var match$2 = match[0];
                var rd1 = match$2.derivative;
                var rs1 = match$2.solve;
                Mocha$RescriptMocha.it("rs1 eq")(undefined, undefined, undefined, (function (param) {
                        Assert$RescriptMocha.ok(approxEq(rs1, 0.44));
                      }));
                Mocha$RescriptMocha.it("rs2 eq")(undefined, undefined, undefined, (function (param) {
                        Assert$RescriptMocha.ok(approxEq(rs2, 0.28));
                      }));
                Mocha$RescriptMocha.it("rd1 eq")(undefined, undefined, undefined, (function (param) {
                        Assert$RescriptMocha.ok(approxEq(rd1, 0.25));
                      }));
                Mocha$RescriptMocha.it("rd2 eq")(undefined, undefined, undefined, (function (param) {
                        Assert$RescriptMocha.ok(approxEq(rd2, 0.20));
                      }));
              }));
        Mocha$RescriptMocha.describe("test findError")(undefined, undefined, undefined, (function (param) {
                var givenL2Vals = construct$1({
                      solve: 0.44,
                      derivative: 0.25
                    }, {
                      solve: 0.28,
                      derivative: 0.20
                    });
                var givenL2Nominals = construct$1(0.46, 0.5);
                var match = deconstruct$1(Curry._2(PerceptronLayer.findError, givenL2Vals, givenL2Nominals));
                var ev2 = match[1];
                var ev1 = match[0];
                Mocha$RescriptMocha.it("ev1 eq")(undefined, undefined, undefined, (function (param) {
                        Assert$RescriptMocha.ok(approxEq(MlErrorMetricFunction.ErrorMetricEuclidean.errToFloat(ev1), -0.02));
                      }));
                Mocha$RescriptMocha.it("ev2 eq")(undefined, undefined, undefined, (function (param) {
                        Assert$RescriptMocha.ok(approxEq(MlErrorMetricFunction.ErrorMetricEuclidean.errToFloat(ev2), -0.22));
                      }));
              }));
        Mocha$RescriptMocha.describe("test backpropagadeError")(undefined, undefined, undefined, (function (param) {
                var givenL1Vals = construct({
                      solve: 0.66,
                      derivative: 0.22
                    }, {
                      solve: 0.97,
                      derivative: 0.02
                    }, {
                      solve: 0.17,
                      derivative: 0.14
                    });
                var givenWeights = construct(construct$1(0.76, 0.25), construct$1(0.15, -1.67), construct$1(-5.12, 3.11));
                var givenError = construct$1(0.87, -0.1);
                var match = deconstruct(Curry._3(PerceptronLayer.backpropagadeError, givenL1Vals, givenError, givenWeights));
                var err3 = match[2];
                var err2 = match[1];
                var err1 = match[0];
                Mocha$RescriptMocha.it("err1 eq")(undefined, undefined, undefined, (function (param) {
                        Assert$RescriptMocha.ok(approxEq(MlErrorMetricFunction.ErrorMetricEuclidean.errToFloat(err1), 0.14));
                      }));
                Mocha$RescriptMocha.it("err2 eq")(undefined, undefined, undefined, (function (param) {
                        Assert$RescriptMocha.ok(approxEq(MlErrorMetricFunction.ErrorMetricEuclidean.errToFloat(err2), 0.0));
                      }));
                Mocha$RescriptMocha.it("err3 eq")(undefined, undefined, undefined, (function (param) {
                        Assert$RescriptMocha.ok(approxEq(MlErrorMetricFunction.ErrorMetricEuclidean.errToFloat(err3), -0.66));
                      }));
              }));
        Mocha$RescriptMocha.describe("test weightCorrection")(undefined, undefined, undefined, (function (param) {
                var givenL1Vals = construct({
                      solve: 0.66,
                      derivative: 0.22
                    }, {
                      solve: 0.97,
                      derivative: 0.02
                    }, {
                      solve: 0.17,
                      derivative: 0.14
                    });
                var givenWeights = construct(construct$1(0.76, 0.25), construct$1(0.15, -1.67), construct$1(-5.12, 3.11));
                var givenError = construct$1(0.87, -0.1);
                var match = deconstruct(Curry._4(PerceptronLayer.weightCorrection, givenL1Vals, givenError, givenWeights, 0.1));
                var match$1 = deconstruct$1(match[0]);
                var w12 = match$1[1];
                var w11 = match$1[0];
                var match$2 = deconstruct$1(match[1]);
                var w22 = match$2[1];
                var w21 = match$2[0];
                var match$3 = deconstruct$1(match[2]);
                var w32 = match$3[1];
                var w31 = match$3[0];
                Mocha$RescriptMocha.it("w11 eq")(undefined, undefined, undefined, (function (param) {
                        Assert$RescriptMocha.ok(approxEq(MlErrorMetricFunction.ErrorMetricEuclidean.errToFloat(w11), 0.7));
                      }));
                Mocha$RescriptMocha.it("w12 eq")(undefined, undefined, undefined, (function (param) {
                        Assert$RescriptMocha.ok(approxEq(MlErrorMetricFunction.ErrorMetricEuclidean.errToFloat(w12), 0.25));
                      }));
                Mocha$RescriptMocha.it("w21 eq")(undefined, undefined, undefined, (function (param) {
                        Assert$RescriptMocha.ok(approxEq(MlErrorMetricFunction.ErrorMetricEuclidean.errToFloat(w21), 0.07));
                      }));
                Mocha$RescriptMocha.it("w22 eq")(undefined, undefined, undefined, (function (param) {
                        Assert$RescriptMocha.ok(approxEq(MlErrorMetricFunction.ErrorMetricEuclidean.errToFloat(w22), -1.66));
                      }));
                Mocha$RescriptMocha.it("w31 eq")(undefined, undefined, undefined, (function (param) {
                        Assert$RescriptMocha.ok(approxEq(MlErrorMetricFunction.ErrorMetricEuclidean.errToFloat(w31), -5.13));
                      }));
                Mocha$RescriptMocha.it("w32 eq")(undefined, undefined, undefined, (function (param) {
                        Assert$RescriptMocha.ok(approxEq(MlErrorMetricFunction.ErrorMetricEuclidean.errToFloat(w32), 3.11));
                      }));
              }));
        Mocha$RescriptMocha.describe("test init")(undefined, undefined, undefined, (function (param) {
                var match = deconstruct(Curry._1(PerceptronLayer.init, (function (param, param$1) {
                            return Math.random() * 2.0 - 1.0;
                          })));
                var match$1 = deconstruct$1(match[0]);
                var match$2 = deconstruct$1(match[1]);
                var match$3 = deconstruct$1(match[2]);
                var allVals = [
                  match$1[0],
                  match$1[1],
                  match$2[0],
                  match$2[1],
                  match$3[0],
                  match$3[1]
                ];
                var zeroVals = Belt_Array.reduce(allVals, [], (function (acc, el) {
                        if (el === 0.0) {
                          return Belt_Array.concat(acc, [el]);
                        } else {
                          return acc;
                        }
                      }));
                var uniqVals = Belt_Array.reduce(allVals, [], (function (acc, el) {
                        if (acc.includes(el)) {
                          return acc;
                        } else {
                          return Belt_Array.concat(acc, [el]);
                        }
                      }));
                Mocha$RescriptMocha.it("no zeros")(undefined, undefined, undefined, (function (param) {
                        Assert$RescriptMocha.equal(undefined, zeroVals.length, 0);
                      }));
                Mocha$RescriptMocha.it("all uniqs")(undefined, undefined, undefined, (function (param) {
                        Assert$RescriptMocha.equal(undefined, uniqVals.length, allVals.length);
                      }));
              }));
      }));

exports.approxEq = approxEq;
exports.Layer1 = Layer1;
exports.Layer2 = Layer2;
exports.PerceptronLayer = PerceptronLayer;
/* PerceptronLayer Not a pure module */
