// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Mocha$RescriptMocha = require("rescript-mocha/lib/js/src/Mocha.bs.js");
var Assert$RescriptMocha = require("rescript-mocha/lib/js/src/Assert.bs.js");
var MlActivationFunction = require("../src/MlActivationFunction.bs.js");

function approxEq(x, y) {
  return (x - y) * (x - y) < 0.01;
}

Mocha$RescriptMocha.describe("test ActivFuncSigmoid")(undefined, undefined, undefined, (function (param) {
        Mocha$RescriptMocha.describe("test solve")(undefined, undefined, undefined, (function (param) {
                Mocha$RescriptMocha.it("test 1")(undefined, undefined, undefined, (function (param) {
                        var result = MlActivationFunction.ActivFuncSigmoid.solve(0.0);
                        Assert$RescriptMocha.ok(approxEq(result, 0.5));
                      }));
                Mocha$RescriptMocha.it("test 2")(undefined, undefined, undefined, (function (param) {
                        var result = MlActivationFunction.ActivFuncSigmoid.solve(-6.0);
                        Assert$RescriptMocha.ok(approxEq(result, 0.0));
                      }));
                Mocha$RescriptMocha.it("test 3")(undefined, undefined, undefined, (function (param) {
                        var result = MlActivationFunction.ActivFuncSigmoid.solve(6.0);
                        Assert$RescriptMocha.ok(approxEq(result, 1.0));
                      }));
              }));
        Mocha$RescriptMocha.describe("test derivarive")(undefined, undefined, undefined, (function (param) {
                Mocha$RescriptMocha.it("test 1")(undefined, undefined, undefined, (function (param) {
                        var result = MlActivationFunction.ActivFuncSigmoid.derivative(0.0);
                        Assert$RescriptMocha.ok(approxEq(result, 0.25));
                      }));
                Mocha$RescriptMocha.it("test 2")(undefined, undefined, undefined, (function (param) {
                        var result = MlActivationFunction.ActivFuncSigmoid.derivative(-6.0);
                        Assert$RescriptMocha.ok(approxEq(result, 0.0));
                      }));
                Mocha$RescriptMocha.it("test 3")(undefined, undefined, undefined, (function (param) {
                        var result = MlActivationFunction.ActivFuncSigmoid.derivative(6.0);
                        Assert$RescriptMocha.ok(approxEq(result, 0.0));
                      }));
              }));
      }));

Mocha$RescriptMocha.describe("test ActivFuncReLU")(undefined, undefined, undefined, (function (param) {
        Mocha$RescriptMocha.describe("test solve")(undefined, undefined, undefined, (function (param) {
                Mocha$RescriptMocha.it("test 1")(undefined, undefined, undefined, (function (param) {
                        var result = MlActivationFunction.ActivFuncReLU.solve(0.0);
                        Assert$RescriptMocha.ok(approxEq(result, 0.0));
                      }));
                Mocha$RescriptMocha.it("test 2")(undefined, undefined, undefined, (function (param) {
                        var result = MlActivationFunction.ActivFuncReLU.solve(-6.0);
                        Assert$RescriptMocha.ok(approxEq(result, 0.0));
                      }));
                Mocha$RescriptMocha.it("test 3")(undefined, undefined, undefined, (function (param) {
                        var result = MlActivationFunction.ActivFuncReLU.solve(6.0);
                        Assert$RescriptMocha.ok(approxEq(result, 6.0));
                      }));
              }));
        Mocha$RescriptMocha.describe("test derivative")(undefined, undefined, undefined, (function (param) {
                Mocha$RescriptMocha.it("test 1")(undefined, undefined, undefined, (function (param) {
                        var result = MlActivationFunction.ActivFuncReLU.derivative(0.0);
                        Assert$RescriptMocha.ok(approxEq(result, 0.0));
                      }));
                Mocha$RescriptMocha.it("test 2")(undefined, undefined, undefined, (function (param) {
                        var result = MlActivationFunction.ActivFuncReLU.derivative(-6.0);
                        Assert$RescriptMocha.ok(approxEq(result, 0.0));
                      }));
                Mocha$RescriptMocha.it("test 3")(undefined, undefined, undefined, (function (param) {
                        var result = MlActivationFunction.ActivFuncReLU.derivative(6.0);
                        Assert$RescriptMocha.ok(approxEq(result, 1.0));
                      }));
              }));
      }));

Mocha$RescriptMocha.describe("test ActivFuncTh")(undefined, undefined, undefined, (function (param) {
        Mocha$RescriptMocha.describe("test solve")(undefined, undefined, undefined, (function (param) {
                Mocha$RescriptMocha.it("test 1")(undefined, undefined, undefined, (function (param) {
                        var result = MlActivationFunction.ActivFuncTh.solve(0.0);
                        Assert$RescriptMocha.ok(approxEq(result, 0.0));
                      }));
                Mocha$RescriptMocha.it("test 2")(undefined, undefined, undefined, (function (param) {
                        var result = MlActivationFunction.ActivFuncTh.solve(-6.0);
                        Assert$RescriptMocha.ok(approxEq(result, -1.0));
                      }));
                Mocha$RescriptMocha.it("test 3")(undefined, undefined, undefined, (function (param) {
                        var result = MlActivationFunction.ActivFuncTh.solve(6.0);
                        Assert$RescriptMocha.ok(approxEq(result, 1.0));
                      }));
              }));
        Mocha$RescriptMocha.describe("test derivative")(undefined, undefined, undefined, (function (param) {
                Mocha$RescriptMocha.it("test 1")(undefined, undefined, undefined, (function (param) {
                        var result = MlActivationFunction.ActivFuncTh.derivative(0.0);
                        Assert$RescriptMocha.ok(approxEq(result, 1.0));
                      }));
                Mocha$RescriptMocha.it("test 2")(undefined, undefined, undefined, (function (param) {
                        var result = MlActivationFunction.ActivFuncTh.derivative(-6.0);
                        Assert$RescriptMocha.ok(approxEq(result, 0.0));
                      }));
                Mocha$RescriptMocha.it("test 3")(undefined, undefined, undefined, (function (param) {
                        var result = MlActivationFunction.ActivFuncTh.derivative(6.0);
                        Assert$RescriptMocha.ok(approxEq(result, 0.0));
                      }));
              }));
      }));

exports.approxEq = approxEq;
/*  Not a pure module */
