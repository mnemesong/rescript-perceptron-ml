// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var ResultExn = require("rescript-result-exn/lib/js/src/ResultExn.bs.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Result = require("rescript/lib/js/belt_Result.js");
var MlPerceptronLayer = require("./MlPerceptronLayer.bs.js");

function MakePerceptron3(L1, L2, L3, AF, EM) {
  var L1XL2 = MlPerceptronLayer.MakePerceptronLayersCross(L1, L2, AF, EM);
  var L2XL3 = MlPerceptronLayer.MakePerceptronLayersCross(L2, L3, AF, EM);
  var solve = function (inp, weights) {
    var w2x3 = weights._1;
    var w1x2 = weights._0;
    var l1Solvs = Curry._1(L1XL2.input, inp);
    var l2Solvs = Belt_Result.flatMap(l1Solvs, (function (r) {
            return Curry._2(L1XL2.solve, r, w1x2);
          }));
    var l3Solvs = Belt_Result.flatMap(l2Solvs, (function (r) {
            return Curry._2(L2XL3.solve, r, w2x3);
          }));
    return Belt_Result.flatMap(Belt_Result.map(l3Solvs, (function (r) {
                      return Belt_Array.map(Curry._1(L3.layerToArr, r), (function (fv) {
                                    return fv.solve;
                                  }));
                    })), (function (r) {
                  return Curry._1(L3.arrToLayer, r);
                }));
  };
  var stude = function (inp, out, weights, studeCoeff) {
    var w2x3 = weights._1;
    var w1x2 = weights._0;
    var l1Solvs = Curry._1(L1XL2.input, inp);
    var l2Solvs = Belt_Result.flatMap(l1Solvs, (function (r) {
            return Curry._2(L1XL2.solve, r, w1x2);
          }));
    var l3Solvs = Belt_Result.flatMap(l2Solvs, (function (r) {
            return Curry._2(L2XL3.solve, r, w2x3);
          }));
    var err3 = Belt_Result.flatMap(l3Solvs, (function (r) {
            return Curry._2(L2XL3.findError, r, out);
          }));
    var err2 = ResultExn.flatMap2(l2Solvs, err3, (function (r, e) {
            return Curry._3(L2XL3.backpropagadeError, r, e, w2x3);
          }));
    var w1x2$p = ResultExn.flatMap2(l1Solvs, err2, (function (r, e) {
            return Curry._4(L1XL2.weightCorrection, r, e, w1x2, studeCoeff);
          }));
    var w2x3$p = ResultExn.flatMap2(l2Solvs, err3, (function (r, e) {
            return Curry._4(L2XL3.weightCorrection, r, e, w2x3, studeCoeff);
          }));
    return ResultExn.flatMap2(w1x2$p, w2x3$p, (function (w1, w2) {
                  return {
                          TAG: /* Ok */0,
                          _0: /* W */{
                            _0: w1,
                            _1: w2
                          }
                        };
                }));
  };
  var init = function (initor) {
    var w1x2 = Curry._1(L1XL2.init, (function (i, j) {
            return Curry._3(initor, i, j, 1);
          }));
    var w2x3 = Curry._1(L2XL3.init, (function (i, j) {
            return Curry._3(initor, i, j, 2);
          }));
    return /* W */{
            _0: w1x2,
            _1: w2x3
          };
  };
  return {
          solve: solve,
          stude: stude,
          init: init
        };
}

function MakePerceptron4(L1, L2, L3, L4, AF, EM) {
  var L1XL2 = MlPerceptronLayer.MakePerceptronLayersCross(L1, L2, AF, EM);
  var L2XL3 = MlPerceptronLayer.MakePerceptronLayersCross(L2, L3, AF, EM);
  var L3XL4 = MlPerceptronLayer.MakePerceptronLayersCross(L3, L4, AF, EM);
  var solve = function (inp, weights) {
    var w3x4 = weights._2;
    var w2x3 = weights._1;
    var w1x2 = weights._0;
    var l1Solvs = Curry._1(L1XL2.input, inp);
    var l2Solvs = Belt_Result.flatMap(l1Solvs, (function (r) {
            return Curry._2(L1XL2.solve, r, w1x2);
          }));
    var l3Solvs = Belt_Result.flatMap(l2Solvs, (function (r) {
            return Curry._2(L2XL3.solve, r, w2x3);
          }));
    var l4Solvs = Belt_Result.flatMap(l3Solvs, (function (r) {
            return Curry._2(L3XL4.solve, r, w3x4);
          }));
    return Belt_Result.flatMap(Belt_Result.map(l4Solvs, (function (r) {
                      return Belt_Array.map(Curry._1(L4.layerToArr, r), (function (fv) {
                                    return fv.solve;
                                  }));
                    })), (function (r) {
                  return Curry._1(L4.arrToLayer, r);
                }));
  };
  var stude = function (inp, out, weights, studeCoeff) {
    var w3x4 = weights._2;
    var w2x3 = weights._1;
    var w1x2 = weights._0;
    var l1Solvs = Curry._1(L1XL2.input, inp);
    var l2Solvs = Belt_Result.flatMap(l1Solvs, (function (r) {
            return Curry._2(L1XL2.solve, r, w1x2);
          }));
    var l3Solvs = Belt_Result.flatMap(l2Solvs, (function (r) {
            return Curry._2(L2XL3.solve, r, w2x3);
          }));
    var l4Solvs = Belt_Result.flatMap(l3Solvs, (function (r) {
            return Curry._2(L3XL4.solve, r, w3x4);
          }));
    var err4 = Belt_Result.flatMap(l4Solvs, (function (r) {
            return Curry._2(L3XL4.findError, r, out);
          }));
    var err3 = Belt_Result.flatMap(l3Solvs, (function (r) {
            return Belt_Result.flatMap(err4, (function (e) {
                          return Curry._3(L3XL4.backpropagadeError, r, e, w3x4);
                        }));
          }));
    var err2 = Belt_Result.flatMap(l2Solvs, (function (r) {
            return Belt_Result.flatMap(err3, (function (e) {
                          return Curry._3(L2XL3.backpropagadeError, r, e, w2x3);
                        }));
          }));
    var w1x2$p = Belt_Result.flatMap(l1Solvs, (function (r) {
            return Belt_Result.flatMap(err2, (function (e) {
                          return Curry._4(L1XL2.weightCorrection, r, e, w1x2, studeCoeff);
                        }));
          }));
    var w2x3$p = Belt_Result.flatMap(l2Solvs, (function (r) {
            return Belt_Result.flatMap(err3, (function (e) {
                          return Curry._4(L2XL3.weightCorrection, r, e, w2x3, studeCoeff);
                        }));
          }));
    var w3x4$p = Belt_Result.flatMap(l3Solvs, (function (r) {
            return Belt_Result.flatMap(err4, (function (e) {
                          return Curry._4(L3XL4.weightCorrection, r, e, w3x4, studeCoeff);
                        }));
          }));
    return Belt_Result.flatMap(w1x2$p, (function (w1) {
                  return Belt_Result.flatMap(w2x3$p, (function (w2) {
                                return Belt_Result.flatMap(w3x4$p, (function (w3) {
                                              return {
                                                      TAG: /* Ok */0,
                                                      _0: /* W */{
                                                        _0: w1,
                                                        _1: w2,
                                                        _2: w3
                                                      }
                                                    };
                                            }));
                              }));
                }));
  };
  var init = function (initor) {
    var w1x2 = Curry._1(L1XL2.init, (function (i, j) {
            return Curry._3(initor, i, j, 1);
          }));
    var w2x3 = Curry._1(L2XL3.init, (function (i, j) {
            return Curry._3(initor, i, j, 2);
          }));
    var w3x4 = Curry._1(L3XL4.init, (function (i, j) {
            return Curry._3(initor, i, j, 2);
          }));
    return /* W */{
            _0: w1x2,
            _1: w2x3,
            _2: w3x4
          };
  };
  return {
          solve: solve,
          stude: stude,
          init: init
        };
}

exports.MakePerceptron3 = MakePerceptron3;
exports.MakePerceptron4 = MakePerceptron4;
/* No side effect */
